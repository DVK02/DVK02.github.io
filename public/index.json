[{"content":" Site Under Construction!!! # I’ve been building and shipping products across multiple roles and industries, from video streaming applications to API platforms. As a product person, my main goal is to understand my users and their specific needs, in order to deliver a product that truly improves their lives.\nI’ve worked for several years in big companies and recently decided to trade that for the opportunity of working in smaller teams. Definitely prefer the latter where one can succeed/fail faster, learn faster, and overall have a way bigger impact.\n","date":"29 February 2024","permalink":"/","section":"","summary":"Site Under Construction!","title":""},{"content":"","date":"29 February 2024","permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"I like to wear different hats, largely due to my natural curiosity and desire to learn, and building projects is the best way for me to delve into engineering, design, and UX. My projects cover a wide range of consumer focus and technical complexity, and it is important to me that any client I work with allows me to dig deep into their problem space.\nLogo Title Description Link Startpage A custom startpage for web browsers. sitegithub Excel Experts Excel consultation website for local business, with a design that highlights key information and booking process. site Serene Jewellers E-commerce site for local jewellery store, built to maximize conversions and retain customers. site ","date":"29 February 2024","permalink":"/projects/","section":"","summary":"I like to wear different hats, largely due to my natural curiosity and desire to learn, and building projects is the best way for me to delve into engineering, design, and UX.","title":"Projects"},{"content":" Experience Company Link Role Dates Location Zynga Technical Product Manager Intern 2021 - 2022 Toronto, Canada Puzzle Cats Software Engineer 2018 - 2020 Toronto, Canada University of Toronto Undergraduate Researcher 2018 Toronto, Canada Bank Audi System Administrator Intern 2017 Doha, Qatar Tiger Direct Technical Sales Associate 2016 Toronto, Canada Education School Link Degree Date University of Toronto BSc, Computer Science 2016-2023 ","date":"29 February 2024","permalink":"/resume/","section":"","summary":" Experience Company Link Role Dates Location Zynga Technical Product Manager Intern 2021 - 2022 Toronto, Canada Puzzle Cats Software Engineer 2018 - 2020 Toronto, Canada University of Toronto Undergraduate Researcher 2018 Toronto, Canada Bank Audi System Administrator Intern 2017 Doha, Qatar Tiger Direct Technical Sales Associate 2016 Toronto, Canada Education School Link Degree Date University of Toronto BSc, Computer Science 2016-2023 ","title":"Resume"},{"content":"","date":"11 January 2024","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"11 January 2024","permalink":"/categories/computer-science/","section":"Categories","summary":"","title":"Computer Science"},{"content":" Introduction # Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\nThe second chapter of The Pragmatic Programmer by Andrew Hunt and David Thomas covers programming processes and ideas that are virtually universal. For this article, I will cover the first section, The Evils of Duplication, which warns against duplication of knowledge in your code. Duplicate code can increase the amount of time it takes to change or debug code, and should be avoided at all costs.\nTypes of Duplication # Imposed duplication: The environment \u0026ldquo;forces\u0026rdquo; the developer to duplicate. Inadvertent duplication: Developer doesn\u0026rsquo;t realize they are duplicating. Impatient duplication: Developer is lazy. Interdeveloper duplication: Multiple developer\u0026rsquo;s duplicate. Addressing Imposed Duplication # Write a code generator Use common metadata representation to define structures across multiple languages each time the software is built. Generate tests programmatically from test specification document that reflect that latest updates made by a client. Write documentation Use comments for high-level explanations, leave the low-level knowledge in the code. Comments will become outdated, and code will become outdated even faster. Untrustworthy comments are worse than no comments at all. Language Issues For example, in C/C++ have header files that duplicate names and type information of exported variables, functions, and (for C++) classes. Unfortunately the only defense against this is to be cognizant of the potential error. For languages that require duplication, for example C/C++, use the header file to document implementation rather than the source files. Addressing Inadvertent Duplication # Avoid unnormalized data.\nA mistake in the design\nExample from the distribution industry: A truck class and a route class can both have a driver attribute. However, say a driver calls in sick and needs to be replaced. Both truck and route have to be updated. There are multiple solutions; revise the design - should a truck or a route have a driver? Should there be a third object that knits together truck and route? Mutually dependent data\nclass Line { public: Point start; Point finish; double distance; }; The above code defined attribute distance, the value of which is dependent on the values of attributes start and finish. The problem is that when start and/or finish get updated, we must remember to update distance. Therefore, it is better to make distance a calculated field like so class Line { public: Point start; Point finish; double distance() { return start.distanceTo(finish); } }; Mutually dependent data drawbacks In the above example, calculating distance isn\u0026rsquo;t an expensive operation. However, there may be cases where the performance cost of avoiding mutually dependent data is not worth it, and caching is required. In these cases, it is fine to violate DRY so long as the violation is contained within the class/function, which at least guarantees a single point of violation. Example below class Line { private: bool changed; double distance; Point start; Point finish; public: void setStart(Point p) { start = p; changed = true; } void setFinish(Point p) { finish = p; changed = true; } Point getStart(void) { return start; } Point getFinish(void) { return finish; } double getDistance() { if (changed) { distance = start.distanceTo(finish); changed = false; } return distance; } }; Note: Where possible, use accessor functions to read and write attributes of objects.\nImpatient Duplication # Shortcuts make for long delays.\nDiscipline Use discipline, usually there isn\u0026rsquo;t an acceptable reason for impatient duplication. Interdeveloper Duplication # Interdeveloper Communication Either facilitated by a tech lead and clear design or other internal resources. Have a central place in source tree for common utilities and scripts to be posted. Get into the habit of reading other people\u0026rsquo;s source code and documentation. Conclusion # If something isn\u0026rsquo;t made easy to use, it wont be used, and very likely knowledge will be duplicated. The continuation of this chapter (part 2 of 3) will be found here.\nTips # Note: For Tips 1-10 check out the previous post.\nTip 11: DRY - Don\u0026rsquo;t Repeat Yourself. Tip 12: Make it easy to reuse. ","date":"11 January 2024","permalink":"/posts/2024-01-pragmatic-programming-duplication/","section":"Posts","summary":"Avoiding duplication in code.","title":"Pragmatic Programming Principles: Duplication"},{"content":"","date":"11 January 2024","permalink":"/series/","section":"Series","summary":"","title":"Series"},{"content":"","date":"11 January 2024","permalink":"/series/the-pragmatic-programmer/","section":"Series","summary":"","title":"The-Pragmatic-Programmer"},{"content":" Introduction # \u0026ldquo;An investment in knowledge always pays the best interest.\u0026rdquo; - Benjamin Franklin\nThe first book in my book summary series will be The Pragmatic Programmer by Andrew Hunt and David Thomas. I aim to cover each chapter by summarizing any takeaways I find interesting or useful. My personal opinion is that these concepts will become increasingly more valuable as AI assisted programming becomes standard practice. The factors that differentiate the skill of programmers, particularly in early career roles, will likely weigh more heavily on their effectiveness and productivity rather than basic syntax and language familiarity.\nThe purpose of this book is to help you become a better programmer, regardless of your technical experience, with a focus on practical application over theoretical. It speaks to the importance of being able to provide solutions from understanding basic principles of computer science, rather than relying on any specific tools.\nCharacteristics of a Pragmatic Programmer # At a high level, a pragmatic programmer will exhibit these qualities:\nEarly adopter/fast adapter Quick to learn and eager to try new things. Inquisitive Asks questions, down to the nitty gritty. Critical Thinker Challenges reasonings and \u0026ldquo;facts\u0026rdquo; from others. Realistic Understands the underlying problem and determines length and difficulty of a task accordingly . Jack of all Trades Most jobs will require a specialist, but should maintain familiarity with other technologies and environments. It\u0026rsquo;s a Continuous Process # \u0026ldquo;Kaizen\u0026rdquo; is a Japanese term that when simplified, is a concept that refers to continuously making small improvements. Dan\u0026rsquo;s Opinion: I\u0026rsquo;m sure this concept is less revolutionary nowadays, especially with the soaring popularity of self-help books like atomic habits that go into detail about these ideas. The Cat Ate My Source Code # \u0026ldquo;The greatest of all weaknesses is the fear of appearing weak.\u0026rdquo; - J.B. Bossuet, Politics from Holy Writ, 1709\nWhen accepting responsibility, you accept being held accountable to its outcome. Take responsibility for yourself and your actions in terms of your day-to-day works all the way to career progression. Things go wrong. It is important to learn how to deal with these things professionally. Software Entropy # The \u0026ldquo;Broken Window Theory\u0026rdquo; explains that a single broken window increases the likelihood of an entire neighborhood ending up tattered and destroyed. Dan\u0026rsquo;s Opinion: This lines up with \u0026ldquo;clean your room\u0026rdquo; and \u0026ldquo;tidy your workspace\u0026rdquo; having a bigger impact on our lives (though I disagree with the second saying). If you don\u0026rsquo;t have time to clean up, don\u0026rsquo;t assume someone else will. As a challenge, point out two to three \u0026ldquo;broken windows\u0026rdquo; to your colleagues and discuss what the problems are and possible actions to fix them. Easier to Ask Forgiveness\u0026hellip; # \u0026ldquo;\u0026hellip; than it is to get permission\u0026rdquo; - Rear Admiral Dr. Grace Hopper\nWhen you are completely set on an idea, figure out what you can reasonably ask for to get it done, and do it well. Show others. Tell them how it could be improved. It is easier to join an ongoing success. Good-Enough Software # The definition of \u0026ldquo;good enough software\u0026rdquo; is such that the software is good enough for users, eventual maintainers, and your own peace of mind. Specifically, a good enough software should meet its user\u0026rsquo;s requirements. So be sure to give users an opportunity to try and determine whether it is good enough (if possible). The expected quality of the product should be defined in the requirements collected from the user at the beginning. It is also important to know when to stop working on a program or a specific feature. There is such a thing as over-refinement. Put your time to higher value projects. Your Knowledge Portfolio # Your knowledge and experience are your most valuable assets. Managing a knowledge portfolio is similar to a financial portfolio: Invest regularly - as a habit. Pretty straight forward, the most important factor is to make investing in your knowledge portfolio a habit. Diversification is key to long-term success. The more technologies you know, the better you can handle change. Balance between conservative and high-risk, high-reward investments. Some technology might be the next hot thing or it can collapse suddenly, while investing in \u0026ldquo;conservative\u0026rdquo; technology could lead to missed opportunities. Try to buy low and sell high for maximum return. Learning emerging tech before it becomes popular. Review and rebalance portfolios periodically. Maybe some of your knowledge is obsolete, maybe some of it is not up to par. Knowledge Portfolio Goals # Learn at least one new language every year. Different languages solve the same problem in different ways. It helps broaden your thinking. Read a technical book each quarter. Preferably something related to a current project. Once you become a master of that project, explore technical books related to other projects. Read non technical books, too. Computers and programs are used by people - don\u0026rsquo;t forget the human side of the equation. Take classes. Look for interesting courses at local universities or colleges. Participate in local user groups. Be an active participant in any local user groups, the networking is also important for your career. Experiment with different environments. If you mainly work with Windows, try Linux (for example). If you only use makefiles and an editor, try and IDE, and vice versa. Stay current. Subscribe to tech blogs. Get wired. Similar to staying current. The key is to continue investing. If you become comfortable with something you sought to learn, find something new. This process will open your mind to different ways of doing things, even in projects that aren\u0026rsquo;t immediately related to what you learned.\nDan\u0026rsquo;s opinion: The knowledge goals I am setting for myself this year are as follows:\nNew language: Rust Technical book: The Pragmatic Programmer Non-technical book: Dune Take classes: I will likely opt to follow online courses available for free, related to low level programming Local user group: TBD Different environment: Installed Arch Linux on my Windows machine (after multiple tries) Staying current: TBD Opportunities for Learning # If somebody asks you a question that you do not know the answer to, use it as an opportunity to learn. If you can\u0026rsquo;t find out yourself, then ask someone who might, and if you don\u0026rsquo;t know someone who might, then it would be wise to add that person to your network. Keep some reading material ready at all times in case there is some free time in your day, such as during a commute or waiting at a doctor\u0026rsquo;s office. Critical Thinking # Think critically about what you read and hear. Do not let your knowledge portfolio be effected by media hype. Keep in mind that top search results can be a matter of content providers paying to be placed there. Communicate! # I believe that it is better to be looked over than it is to be overlooked. - Mae West, Belle of the Nineties, 1934\nHaving the best ideas and code is useless without being able to communicate with other people. Communication is a large part of the job; team meetings, client meetings, one on ones, etc. Technically speaking, we communicate with machines through code. Therefore we need to make sure we communicate effectively. Know what you want to say. Write down what you want to say and ask if it gets across the point you are trying to make. This approach is applicable for writing documents, important meetings and calls, etc. Jot down ideas you want to communicate and plan a couple strategies for getting them across. Know your audience. Understand the needs, interests, and capabilities of your audience. Pitch your idea with context pertaining to the interests of specific demographic of your audience. Make what you\u0026rsquo;re saying relevant in time and in content. Adjust the style of your delivery to suit your audience. Make it look good using style sheets or layout systems. Involve your audience by having them read an early draft and getting feedback. Be a listener, encourage people to talk by asking questions or have them summarize what you tell them. Get back to people, at the very least with a simple \u0026ldquo;I\u0026rsquo;ll get back to you later\u0026rdquo;. Tips # The authors continue to provide basic characteristics of pragmatic programmers in the form of tips.\nTip 1: Care about your craft. Continue to try and improve your work. Tip 2: Think about what you are working on as you work on it. Every decision requires critical appraisal. Tip 3: Provide options instead of excuses. When something doesn\u0026rsquo;t work, explain what can be done to fix the problem. Don\u0026rsquo;t be afraid to ask for help. Tip 4: Don\u0026rsquo;t live with broken windows; in our context, fix bad designs and poor code as soon as possible. If it is not possible to entirely fix the issue, take some action to prevent further damage. Tip 5: Be a catalyst for change. Tip 6: Remember the big picture. Review what\u0026rsquo;s happening around you and not just on yourself. Tip 7: Make quality a requirements issue. There will be trade-offs made, so let the users help guide you to a version of the product that is good enough. Tip 8: Invest regularly in your knowledge portfolio. Tip 9: Critically analyze what you read and hear. Tip 10: It\u0026rsquo;s both what you say and the way you say it. Dan\u0026rsquo;s Note to Self # This is my first ever blog post. I think for a book summary the best method is to keep bullet points so it is easy to review at a glance. However, it definitely went on too long. So for future chapters I will split them up into multiple parts if necessary. I stopped paraphrasing as much towards the end as I just wanted to get it over with.\n","date":"29 December 2023","permalink":"/posts/2023-12-pragmatic-programming-intro/","section":"Posts","summary":"Introduction # \u0026ldquo;An investment in knowledge always pays the best interest.","title":"Pragmatic Programming Principles: Introduction"},{"content":"","date":"1 January 0001","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"}]