[{"content":" About Me # I’ve built and shipped products across multiple roles and industries, from serving mobile games to over a million users - to improving analytics tools for internal teams. As a product person, my main goal is to understand my users and their specific needs, in order to deliver a product that truly improves their lives.\n","date":"8 March 2024","permalink":"/","section":"","summary":"About Me # I’ve built and shipped products across multiple roles and industries, from serving mobile games to over a million users - to improving analytics tools for internal teams.","title":""},{"content":"","date":"8 March 2024","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"8 March 2024","permalink":"/series/introduction-to-product-management/","section":"Series","summary":"","title":"Introduction-to-Product-Management"},{"content":"","date":"8 March 2024","permalink":"/categories/product-management/","section":"Categories","summary":"","title":"Product Management"},{"content":" Resumes # The 15 Second Rule # A resume screener will glace at resume for about 15 seconds. The Rules # Rule 1: Shorter is Better # Stick to the highlights, keep out what isn\u0026rsquo;t important. Less than 4 years of experience, keep to one page. Over 4 can go 1-2 pages. Rule 2: Bullet, Not Blobs # Easier to read. Keep each bullet to less than three lines. No more than 50% of bullets should be be over 1 line. Edit lines that briefly overflow to next line as they are a waste of space. Rule 3: Accomplishments, Not Responsibilities # Examples Responsibility Oriented: Design features for Amazon S3 and oversee development of the features across software engineers and testers. Accomplishment Oriented: Designed the SS Frontline feature, managed its development, and led its integration across three products, leading to an additional $10 million in revenue. Use past tense to better convey an accomplishment rather responsibility. Focus on the impact; \u0026ldquo;what\u0026rdquo; more so than the \u0026ldquo;how\u0026rdquo; (both are important though). How much money did you make for your company? How much time did you save your team? By how much did you improve customer retention? If you have an existing resume, it might help to start from scratch with these questions in mind: What are the five things you are most proud of? What would your team say are the five most important things you did? Rule 4: Use a Good Template # Don\u0026rsquo;t use one with lots of graphics. A good template clearly showcases your highlight. Rule 5: Don\u0026rsquo;t Skip the Best Stuff # Don\u0026rsquo;t leave something out for a reason you think is \u0026ldquo;appropriate\u0026rdquo;. Example: Starting a game development company, hired multiple engineers and designers, and overseen development of a game - BUT did not include this point becaues it hadn\u0026rsquo;t launched a game yet. In short, an experience should not be excluded because it wasn\u0026rsquo;t \u0026ldquo;done\u0026rdquo;. Other bad reasons include: \u0026ldquo;It was for class\u0026rdquo; \u0026ldquo;We didn\u0026rsquo;t get many downloads\u0026rdquo; Attributes of a Good PM Resume # Showcase technical skills, love technology, have initiative, are leaders, and will make an impact. Passion for Technology: Experiences in tech and side projects. Initiative: Show initiative through a university club, new employee training program at a startup. Leadership: Managing an intern. Impact: Show positive impact in prior roles - highlight personal contributions rather than the team\u0026rsquo;s. Explicitly state what you\u0026rsquo;ve built, created, led, or implemented. Avoid weak phrases such as \u0026ldquo;worked with\u0026rdquo; and \u0026ldquo;helped with\u0026rdquo;. Tech Skills: List programming languages in a \u0026ldquo;technical skils\u0026rdquo; section. Ideally will also have specific projects to list. What to Include # This section lists common components found in resumes and rates their importance.\nDo not include every bullet here!!!\nObjectives: Never useful. Almost always a waste of space - everything put here can be inferred by the resume and the act of submitting the resume. Summary: Rarely useful. A good resume conveys this information already. Skills: Include if applicable. Include technical skills / proficiency with software design. Awards: Include. Make award meaningful; How select is it? What did you do to win it? Activities: Sometimes include. Personally, I do not like this so exclude it. - Dan Projects: Include. Probably 2nd most important resume item. Describe what the project is that you built and what metrics of success you have. Website URL: Include. Website should provide your resume, as well as additional details about your projects (such as screenshots). Education: Depends based on how long ago you graduated. Substantial Leadership Positions, emphasis on substantial. Work experience and projects go at the top. Skills and education at the bottom.\n","date":"8 March 2024","permalink":"/posts/2024-03-pm-resume/","section":"Posts","summary":"Resumes # The 15 Second Rule # A resume screener will glace at resume for about 15 seconds.","title":"Product Manager Resume"},{"content":"","date":"8 March 2024","permalink":"/series/","section":"Series","summary":"","title":"Series"},{"content":" Engineer to PM # There are some transitional skills that should be highlighted and taken advantage of.\nTechnical Experience # Companies looking for a CS background are doing so for these reasons:\nForm strong relationships with engineers. Good intuition on how long engineering tasks should take. Self-sufficient; PMs try and take on tasks themselves. Customer Focus # Transitioning from engineer to PM shows the ability to learn many hard skills, however it is important to learn a customer focus approach.\nThinking constantly about target audience, their needs, and how they different from you and the company. Talk to customers of current product; root cause analysis on cusomter\u0026rsquo;s request. Writing user stories is another way to tackle customer focus. Put yourself in the customer\u0026rsquo;s shoes. Practice describing features from the customer\u0026rsquo;s POV by calling out the user-facing benefits. Think Big # The goal is to build something that doesn\u0026rsquo;t exist - start thinking big then wittle away. Embrace the Persuasive Elements of Communication # A PM needs to master both persuasion through research and charisma.\nSpeak with a level of confidence that matches certainty of success. ","date":"8 March 2024","permalink":"/posts/2024-03-eng-to-pm/","section":"Posts","summary":"Engineer to PM # There are some transitional skills that should be highlighted and taken advantage of.","title":"Transition from Software Engineer to Product Manager"},{"content":" What is a PM? # PM is responsible for making sure that a team ships a great product. Lead without authority, influence with vision and research. Sit at the intersection of tech, business, and design. Wear many hats and learn multiple points of view. Advocate for the customer. Learn and translate their needs into product goals and features. A PM knows when the utilize teams of different function, and fill in when needed. Functions of a PM # Involved in all phases of a product life cycle: Research \u0026amp; Planning -\u0026gt; Design -\u0026gt; Implement \u0026amp; Test -\u0026gt; Release a PM usually focuses on R\u0026amp;P, while TPM focuses on D, I\u0026amp;T. Research \u0026amp; Planning # Deciding what to build next based on customer request, competitive analysis, new technology, user research, the sales or marketing teams, brainstorming, or the big vision for the product. Next, create or propose a roadmap. Talk to all sources to create a large list of potential features or development work. Then filter and prioritize based on customer needs, competitive landscape, business needs, and team\u0026rsquo;s expertise. Start defining what success looks like, typically using the OKR model. Design # Features and functionality of the product. On some teams, a PM will write a specifications (to be reviewed by others) that includes: Goals, use cases, requirements, wireframes, bullet point describing every possible state of the feature, internationalization, security Otherwise, the process will be looser with more rapid design. Work with a designer and iterate, talking about goals and features, then sending to engineers to review. Interview Question: Ask who you\u0026rsquo;ll be working with on core and extended teams. How much time working on specs and how much time working with designers. Implement and Test # During the implementation stage, keep track of how the project is going. Sometimes there are blockages in workflow - try and resolve these. If task is behind schedule, try to cut lower priority work. Qualitative Feedback \u0026ldquo;Dogfooding\u0026rdquo; is the idea of using one\u0026rsquo;s own product. Conduct usability studies (usually in smaller companies) Quantitative Feedback Acquired via running experiments, where a percentage of users are expose to the new feature (experiment group) and the rest are not (control group). Compare success metrics between user and control groups. Release # Ensure launch goes smoothly. Launch checklist (varies team to team): Final approvals, team who will support product are prepared, prepare for all things that could go wrong. ","date":"8 March 2024","permalink":"/posts/2024-03-what-is-pm/","section":"Posts","summary":"What is a PM?","title":"What is Product Management?"},{"content":" Introduction # Nowadays, the Linux kernel and many popular distributions provide out of the box support for common devices, however there are still cases that require manual intervention to get a system fully up and running. This article summarizes the section about managing and configuring hardware from The Linux Bible.\nChecking Hardware # When a Linux system boots, it detects hardware and loads the appropriate drivers for them.\nAny user can run the dmesg command to see what hardware was detected and which drivers were loaded. journalctl outputs information pertaining to a particular boot instance. lspci command lists the PCI buses on your system and the hardware connected to them. lsusb lists all usb ports, and (if available) the peripherals connected via usb port, such as keyboard, mouse, and removable media. lscpue gives basic information about your processor. Example Output # $ dmesg | less [ 0.000000] Linux version 5.0.9-301.fc30.x86_64 (mockbuild@bkernel04.phx2.fedoraproject.org) (gcc version 9.0.1 20190312 Chapter 8: Learning System Administration [ (Red Hat 9.0.1-0.10) (GCC)) #1 SMP Tue Apr 23 23:57:35 UTC 2019 0.000000] Command line: BOOT_IMAGE=(hd0,msdos1)/vmlinuz-5.0.9-301.fc30.x86_64 root=/dev/mapper/fedora_localhost--live-root ro resume=/dev/mapper/fedora_localhost--live-swap rd.lvm.lv=fedora_localhost-live/root rd.lvm.lv=fedora_localhost-live/swap rhgb quiet This output shows the kernel version (v5.0.9) followed by kernel command-line options.\n... [79.177466] sd 9:0:0:0: Attached scsi generic sg2 type 0 S31B1102 USB DISK 1100 PQ: 0 ANSI: 0 CCS [79.177854] sd 9:0:0:0: [sdb] 8343552 512-byte logical blocks: (4.27 GB/3.97 GiB) [79.178593] sd 9:0:0:0: [sdb] Write Protect is off This output depicts a removable media being mounted.\n$ lspci 00:00.0 Host bridge: Intel Corporation 5000X Chipset Memory ControllerHub 00:02.0 PCI bridge: Intel Corporation 5000 Series Chipset PCI Express x4 Port 2 00:1b.0 Audio device: Intel Corporation 631xESB/632xESB High Definition Audio Controller (rev 09) 00:1d.0 USB controller: Intel Corporation 631xESB/632xESB/3100 Chipset UHCI USBController#1 (rev 09) 07:00.0 VGA compatible controller: nVidia Corporation NV44 0c:02.0 Ethernet controller: Intel Corporation 82541PI Gigabit Ethernet Controller (rev 05) If there is any hardware that is not working as intended, this is a good starting point to get the required information needed to start your research.\nManaging Removable Hardware # Most desktop environments provide a graphical interface for managing removable hardware. They may differ in the functions they provide, but are typically built as an interface to the same underlying mechanism, Udev. The Udev daemon, udevd creates and removes devices (/dev directory) as they are added and removed from the computer.\nIf you are using a desktop environment such as GNOME or KDE, search the many ways you can configure how to handle removable media using their provided interfaces. USB flash drives are typically created as /dev/sda, /dev/sdb, etc. and they are automatically mounted on /run/media/your_user_name\nLoading Modules For Missing Hardware Drivers # Kernel modules are installed in /lib/modules/ subdirectories. The name of each sub- directory is based on the release number of the kernel. For example, if the kernel were 5.3.8-200.fc30.x86_64, the /lib/modules/5.3.8-200.fc30.x86_64 directory would contain drivers for that kernel. Modules in those directories can then be loaded and unloaded as they are needed.\nlsmod lists which modules are loaded into the running kerner. modinfo provided with a module name will return information on the module. The root user may use the command modprobe to temporarily load a module that wasn\u0026rsquo;t automatically loaded by the kernel. The module will not automatically load in unless included as part of a startup script.\n","date":"4 March 2024","permalink":"/posts/2024-03-linux-hardware/","section":"Posts","summary":"Introduction # Nowadays, the Linux kernel and many popular distributions provide out of the box support for common devices, however there are still cases that require manual intervention to get a system fully up and running.","title":"Configure and Manage Linux Hardware"},{"content":"","date":"4 March 2024","permalink":"/categories/linux/","section":"Categories","summary":"","title":"Linux"},{"content":"","date":"4 March 2024","permalink":"/tags/linux-bible/","section":"Tags","summary":"","title":"Linux Bible"},{"content":"","date":"4 March 2024","permalink":"/tags/linux-hardware/","section":"Tags","summary":"","title":"Linux Hardware"},{"content":"","date":"4 March 2024","permalink":"/series/linux-basic-system-administration/","section":"Series","summary":"","title":"Linux-Basic-System-Administration"},{"content":"","date":"4 March 2024","permalink":"/tags/system-administration/","section":"Tags","summary":"","title":"System Administration"},{"content":"","date":"4 March 2024","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":"3 March 2024","permalink":"/tags/linux-desktop/","section":"Tags","summary":"","title":"Linux Desktop"},{"content":" The Linux Desktop # The Linux kernel relies on a software stack in order to provide a desktop experience. That software stack includes driver support, display server, system libraries, system daemons, desktop shells, and UI toolkits. Sounds complicated right? There actually is a lot of software behind the scenes - for any operating system - that allows even the most basic usage of graphic interfaces, mouse, and keyboard. The good news that most Linux desktop users do not have to worry about managing all that stuff. This is thanks to developers and maintainers of Linux distributions.\nLinux Distributions # A Linux distributions (aka Linux distro), is a select stack of software that is built on top of the Linux kernel. The differences between distros really boils down to a couple things: package manager (i.e. the way you install and maintain software) and update cadence. This is where the fun begins. Each distro is built with specific philosophies, for example Ubuntu tries to provide a preconfigured, easy to use, and complete desktop experience from the get go. On the other hand, Arch Linux provides a wiki and a disc image of their installer, giving you full authority (and responsibility) to manage every bit of your desktop (other than the complete essentials).\nIn most cases, you can strip down the even the most preconfigured distro and make it look and function like another one. As a first time Linux user, a distro that requires the least bit of initial tinkering is recommended. Before jumping into a Linux distribution, it is important to check whether it will support your hardware out of the box, if it requires manual intervention, or there is no solution at the moment. The next topic to cover is that of a desktop environment.\nDesktop Environment # Desktop environments are optional to Linux systems, as there are many use cases that require only the standard CLI. Linux provides the ability to choose a desktop environment during log in, meaning multiple may be coexist on a system, letting the user choose one based on their needs. Popular desktop environments include many extensions, such as how GNOME includes a login screen, panels, systrays, and tools to configure settings. For a lightweight system, one might opt for a more efficient yet less feature-rich window manager (such as twm / fluxbox) or desktop environment (such as LXDE / Xfce). On more powerful systems, GNOME and KDE are good desktop environments options to choose from.\nA desktop environment relies on a desktop interface and window manager, both of which work in tandem to provide a graphical experience that most of us are familiar with.\nDesktop Interfaces # X Windows System # The X Window System (aka X) desktop interface provides a framework that allows development of desktop environments and simple window managers. X works similar to a backwards client/server model. The X server runs on the local system providing an interface for hardware. The X clients consist of graphical applications that can be launched a local system or system on a network to which the X server permits. X itself provides a plain gray background and a \u0026ldquo;X\u0026rdquo; shaped mouse cursor - no menus, panels, or icons on a plain X screen. An X client wont have a border around it to move, minimize, or close the window. These features are handled by a window manager. X Implementations # Most major Linux distributions use an X implementation from the X.Org Foundation. Another up and coming X server is called Wayland, which is currently the default X server for Fedora. Window Managers # Window managers, as the name indicates, provide the ability to manage windows that have been launched, i.e. the X clients. They also often provide menus for launching applications and working with the desktop. ","date":"3 March 2024","permalink":"/posts/2024-03-linux-desktop/","section":"Posts","summary":"High level summary of the linux desktop.","title":"Linux Overview: Linux Desktop"},{"content":" Series Overview: What is Linux? # Many years ago, I would search up \u0026ldquo;Linux vs Ubuntu\u0026rdquo; and \u0026ldquo;Linux kernel vs Linux operating system\u0026rdquo;. As a total newbie at the time, many of the explanations involved more terms that I did not know. I eventually learned about operating systems and kernels formally, as part of the amazing operating systems course taught by Dr. Angele Demke Brown. After having developed a basic version of POSIX threads and a very simple file system, I felt confident enough to revisit \u0026ldquo;Linux vs Ubuntu\u0026rdquo; posts on Stack Overflow. (Note: You do not need to have written your own version of pthreads or a file system to understand these concepts)\nMy motivation to write this series is based on my initial struggles of understanding what Linux is and any related concepts, and I hope to provide an easier onboarding experience to them.\nA Very Brief History # Understanding the history of Linux is important, as it provides a great motivaiton for open source development. Linux was developed by Linus Torvalds, in his attempt to provide (himself and anyone that may have been interested) a free alternative to the commercially available Unix OS kernel. A decade later, Linux wound up competing with Microsoft in the enterprise software market. Long story short, Microsoft got smoked; a billion dollar proprietary software company could not compete against an open source product. Today, Microsoft Azure incorporates Linux to a degree and they have publicly shifted their opinion of Linux. There are plenty of articles that dig deeper on both the history of Linux and its competition against other open source software and proprietary software companies.\nWhat exactly is Linux? # Linux is an operating system kernel. A kernel is the core of an operating system, which at a high level is a mediator between user level applications and the hardware. Every application you have interacted with relies on the operating system, and by extension the kernel, to launch, process, and execute your actions. Here is the Linux GitHub page, which contains all the code for the Linux kernel. Freely available for anyone to see and contribute to. Imagine if Bill Gates had a website with the code for Windows or Steve Wozniak for Apple.\nConclusing Remarks # At a high level, Linux is a freely available operating system kernel. It has applications in desktops, servers, embedded devices, etc. The next couple articles will talk about Linux as a desktop operating system.\n","date":"3 March 2024","permalink":"/posts/2024-03-what-is-linux/","section":"Posts","summary":"Overview of the Linux Desktop.","title":"Linux Overview: What is Linux?"},{"content":"","date":"3 March 2024","permalink":"/series/linux-overview/","section":"Series","summary":"","title":"Linux-Overview"},{"content":"","date":"29 February 2024","permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"My projects cover a wide range of consumer focus and technical complexity, and it is important to me that any client I work with allows me to dig deep into their problem space.\nLogo Title Description Link Startpage A custom startpage for web browsers. sitegithub Excel Experts Excel consultation website for local business, with a design that highlights key information and booking process. site Serene Jewellers E-commerce site for local jewellery store, built to maximize conversions and retain customers. site ","date":"29 February 2024","permalink":"/projects/","section":"","summary":"My projects cover a wide range of consumer focus and technical complexity, and it is important to me that any client I work with allows me to dig deep into their problem space.","title":"Projects"},{"content":" Experience Company Link Role Dates Location Zynga Technical Product Manager Intern 2021 - 2022 Toronto, Canada Puzzle Cats Software Engineer 2018 - 2020 Toronto, Canada University of Toronto Undergraduate Researcher 2018 Toronto, Canada Bank Audi System Administrator Intern 2017 Doha, Qatar Tiger Direct Technical Sales Associate 2016 Toronto, Canada Education School Link Degree Date University of Toronto BSc, Computer Science 2016-2023 ","date":"29 February 2024","permalink":"/resume/","section":"","summary":" Experience Company Link Role Dates Location Zynga Technical Product Manager Intern 2021 - 2022 Toronto, Canada Puzzle Cats Software Engineer 2018 - 2020 Toronto, Canada University of Toronto Undergraduate Researcher 2018 Toronto, Canada Bank Audi System Administrator Intern 2017 Doha, Qatar Tiger Direct Technical Sales Associate 2016 Toronto, Canada Education School Link Degree Date University of Toronto BSc, Computer Science 2016-2023 ","title":"Resume"},{"content":"","date":"11 January 2024","permalink":"/categories/computer-science/","section":"Categories","summary":"","title":"Computer Science"},{"content":" Introduction # Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\nThe second chapter of The Pragmatic Programmer by Andrew Hunt and David Thomas covers programming processes and ideas that are virtually universal. For this article, I will cover the first section, The Evils of Duplication, which warns against duplication of knowledge in your code. Duplicate code can increase the amount of time it takes to change or debug code, and should be avoided at all costs.\nTypes of Duplication # Imposed duplication: The environment \u0026ldquo;forces\u0026rdquo; the developer to duplicate. Inadvertent duplication: Developer doesn\u0026rsquo;t realize they are duplicating. Impatient duplication: Developer is lazy. Interdeveloper duplication: Multiple developer\u0026rsquo;s duplicate. Addressing Imposed Duplication # Write a code generator Use common metadata representation to define structures across multiple languages each time the software is built. Generate tests programmatically from test specification document that reflect that latest updates made by a client. Write documentation Use comments for high-level explanations, leave the low-level knowledge in the code. Comments will become outdated, and code will become outdated even faster. Untrustworthy comments are worse than no comments at all. Language Issues For example, in C/C++ have header files that duplicate names and type information of exported variables, functions, and (for C++) classes. Unfortunately the only defense against this is to be cognizant of the potential error. For languages that require duplication, for example C/C++, use the header file to document implementation rather than the source files. Addressing Inadvertent Duplication # Avoid unnormalized data.\nA mistake in the design\nExample from the distribution industry: A truck class and a route class can both have a driver attribute. However, say a driver calls in sick and needs to be replaced. Both truck and route have to be updated. There are multiple solutions; revise the design - should a truck or a route have a driver? Should there be a third object that knits together truck and route? Mutually dependent data\nclass Line { public: Point start; Point finish; double distance; }; The above code defined attribute distance, the value of which is dependent on the values of attributes start and finish. The problem is that when start and/or finish get updated, we must remember to update distance. Therefore, it is better to make distance a calculated field like so class Line { public: Point start; Point finish; double distance() { return start.distanceTo(finish); } }; Mutually dependent data drawbacks In the above example, calculating distance isn\u0026rsquo;t an expensive operation. However, there may be cases where the performance cost of avoiding mutually dependent data is not worth it, and caching is required. In these cases, it is fine to violate DRY so long as the violation is contained within the class/function, which at least guarantees a single point of violation. Example below class Line { private: bool changed; double distance; Point start; Point finish; public: void setStart(Point p) { start = p; changed = true; } void setFinish(Point p) { finish = p; changed = true; } Point getStart(void) { return start; } Point getFinish(void) { return finish; } double getDistance() { if (changed) { distance = start.distanceTo(finish); changed = false; } return distance; } }; Note: Where possible, use accessor functions to read and write attributes of objects.\nImpatient Duplication # Shortcuts make for long delays.\nDiscipline Use discipline, usually there isn\u0026rsquo;t an acceptable reason for impatient duplication. Interdeveloper Duplication # Interdeveloper Communication Either facilitated by a tech lead and clear design or other internal resources. Have a central place in source tree for common utilities and scripts to be posted. Get into the habit of reading other people\u0026rsquo;s source code and documentation. Conclusion # If something isn\u0026rsquo;t made easy to use, it wont be used, and very likely knowledge will be duplicated. The continuation of this chapter (part 2 of 3) will be found here.\nTips # Note: For Tips 1-10 check out the previous post.\nTip 11: DRY - Don\u0026rsquo;t Repeat Yourself. Tip 12: Make it easy to reuse. ","date":"11 January 2024","permalink":"/posts/2024-01-pragmatic-programming-duplication/","section":"Posts","summary":"Avoiding duplication in code.","title":"Pragmatic Programming Principles: Duplication"},{"content":"","date":"11 January 2024","permalink":"/series/the-pragmatic-programmer/","section":"Series","summary":"","title":"The-Pragmatic-Programmer"},{"content":" Introduction # \u0026ldquo;An investment in knowledge always pays the best interest.\u0026rdquo; - Benjamin Franklin\nThe first book in my book summary series will be The Pragmatic Programmer by Andrew Hunt and David Thomas. I aim to cover each chapter by summarizing any takeaways I find interesting or useful. My personal opinion is that these concepts will become increasingly more valuable as AI assisted programming becomes standard practice. The factors that differentiate the skill of programmers, particularly in early career roles, will likely weigh more heavily on their effectiveness and productivity rather than basic syntax and language familiarity.\nThe purpose of this book is to help you become a better programmer, regardless of your technical experience, with a focus on practical application over theoretical. It speaks to the importance of being able to provide solutions from understanding basic principles of computer science, rather than relying on any specific tools.\nCharacteristics of a Pragmatic Programmer # At a high level, a pragmatic programmer will exhibit these qualities:\nEarly adopter/fast adapter Quick to learn and eager to try new things. Inquisitive Asks questions, down to the nitty gritty. Critical Thinker Challenges reasonings and \u0026ldquo;facts\u0026rdquo; from others. Realistic Understands the underlying problem and determines length and difficulty of a task accordingly . Jack of all Trades Most jobs will require a specialist, but should maintain familiarity with other technologies and environments. It\u0026rsquo;s a Continuous Process # \u0026ldquo;Kaizen\u0026rdquo; is a Japanese term that when simplified, is a concept that refers to continuously making small improvements. Dan\u0026rsquo;s Opinion: I\u0026rsquo;m sure this concept is less revolutionary nowadays, especially with the soaring popularity of self-help books like atomic habits that go into detail about these ideas. The Cat Ate My Source Code # \u0026ldquo;The greatest of all weaknesses is the fear of appearing weak.\u0026rdquo; - J.B. Bossuet, Politics from Holy Writ, 1709\nWhen accepting responsibility, you accept being held accountable to its outcome. Take responsibility for yourself and your actions in terms of your day-to-day works all the way to career progression. Things go wrong. It is important to learn how to deal with these things professionally. Software Entropy # The \u0026ldquo;Broken Window Theory\u0026rdquo; explains that a single broken window increases the likelihood of an entire neighborhood ending up tattered and destroyed. Dan\u0026rsquo;s Opinion: This lines up with \u0026ldquo;clean your room\u0026rdquo; and \u0026ldquo;tidy your workspace\u0026rdquo; having a bigger impact on our lives (though I disagree with the second saying). If you don\u0026rsquo;t have time to clean up, don\u0026rsquo;t assume someone else will. As a challenge, point out two to three \u0026ldquo;broken windows\u0026rdquo; to your colleagues and discuss what the problems are and possible actions to fix them. Easier to Ask Forgiveness\u0026hellip; # \u0026ldquo;\u0026hellip; than it is to get permission\u0026rdquo; - Rear Admiral Dr. Grace Hopper\nWhen you are completely set on an idea, figure out what you can reasonably ask for to get it done, and do it well. Show others. Tell them how it could be improved. It is easier to join an ongoing success. Good-Enough Software # The definition of \u0026ldquo;good enough software\u0026rdquo; is such that the software is good enough for users, eventual maintainers, and your own peace of mind. Specifically, a good enough software should meet its user\u0026rsquo;s requirements. So be sure to give users an opportunity to try and determine whether it is good enough (if possible). The expected quality of the product should be defined in the requirements collected from the user at the beginning. It is also important to know when to stop working on a program or a specific feature. There is such a thing as over-refinement. Put your time to higher value projects. Your Knowledge Portfolio # Your knowledge and experience are your most valuable assets. Managing a knowledge portfolio is similar to a financial portfolio: Invest regularly - as a habit. Pretty straight forward, the most important factor is to make investing in your knowledge portfolio a habit. Diversification is key to long-term success. The more technologies you know, the better you can handle change. Balance between conservative and high-risk, high-reward investments. Some technology might be the next hot thing or it can collapse suddenly, while investing in \u0026ldquo;conservative\u0026rdquo; technology could lead to missed opportunities. Try to buy low and sell high for maximum return. Learning emerging tech before it becomes popular. Review and rebalance portfolios periodically. Maybe some of your knowledge is obsolete, maybe some of it is not up to par. Knowledge Portfolio Goals # Learn at least one new language every year. Different languages solve the same problem in different ways. It helps broaden your thinking. Read a technical book each quarter. Preferably something related to a current project. Once you become a master of that project, explore technical books related to other projects. Read non technical books, too. Computers and programs are used by people - don\u0026rsquo;t forget the human side of the equation. Take classes. Look for interesting courses at local universities or colleges. Participate in local user groups. Be an active participant in any local user groups, the networking is also important for your career. Experiment with different environments. If you mainly work with Windows, try Linux (for example). If you only use makefiles and an editor, try and IDE, and vice versa. Stay current. Subscribe to tech blogs. Get wired. Similar to staying current. The key is to continue investing. If you become comfortable with something you sought to learn, find something new. This process will open your mind to different ways of doing things, even in projects that aren\u0026rsquo;t immediately related to what you learned.\nDan\u0026rsquo;s opinion: The knowledge goals I am setting for myself this year are as follows:\nNew language: Rust Technical book: The Pragmatic Programmer Non-technical book: Dune Take classes: I will likely opt to follow online courses available for free, related to low level programming Local user group: TBD Different environment: Installed Arch Linux on my Windows machine (after multiple tries) Staying current: TBD Opportunities for Learning # If somebody asks you a question that you do not know the answer to, use it as an opportunity to learn. If you can\u0026rsquo;t find out yourself, then ask someone who might, and if you don\u0026rsquo;t know someone who might, then it would be wise to add that person to your network. Keep some reading material ready at all times in case there is some free time in your day, such as during a commute or waiting at a doctor\u0026rsquo;s office. Critical Thinking # Think critically about what you read and hear. Do not let your knowledge portfolio be effected by media hype. Keep in mind that top search results can be a matter of content providers paying to be placed there. Communicate! # I believe that it is better to be looked over than it is to be overlooked. - Mae West, Belle of the Nineties, 1934\nHaving the best ideas and code is useless without being able to communicate with other people. Communication is a large part of the job; team meetings, client meetings, one on ones, etc. Technically speaking, we communicate with machines through code. Therefore we need to make sure we communicate effectively. Know what you want to say. Write down what you want to say and ask if it gets across the point you are trying to make. This approach is applicable for writing documents, important meetings and calls, etc. Jot down ideas you want to communicate and plan a couple strategies for getting them across. Know your audience. Understand the needs, interests, and capabilities of your audience. Pitch your idea with context pertaining to the interests of specific demographic of your audience. Make what you\u0026rsquo;re saying relevant in time and in content. Adjust the style of your delivery to suit your audience. Make it look good using style sheets or layout systems. Involve your audience by having them read an early draft and getting feedback. Be a listener, encourage people to talk by asking questions or have them summarize what you tell them. Get back to people, at the very least with a simple \u0026ldquo;I\u0026rsquo;ll get back to you later\u0026rdquo;. Tips # The authors continue to provide basic characteristics of pragmatic programmers in the form of tips.\nTip 1: Care about your craft. Continue to try and improve your work. Tip 2: Think about what you are working on as you work on it. Every decision requires critical appraisal. Tip 3: Provide options instead of excuses. When something doesn\u0026rsquo;t work, explain what can be done to fix the problem. Don\u0026rsquo;t be afraid to ask for help. Tip 4: Don\u0026rsquo;t live with broken windows; in our context, fix bad designs and poor code as soon as possible. If it is not possible to entirely fix the issue, take some action to prevent further damage. Tip 5: Be a catalyst for change. Tip 6: Remember the big picture. Review what\u0026rsquo;s happening around you and not just on yourself. Tip 7: Make quality a requirements issue. There will be trade-offs made, so let the users help guide you to a version of the product that is good enough. Tip 8: Invest regularly in your knowledge portfolio. Tip 9: Critically analyze what you read and hear. Tip 10: It\u0026rsquo;s both what you say and the way you say it. Dan\u0026rsquo;s Note to Self # This is my first ever blog post. I think for a book summary the best method is to keep bullet points so it is easy to review at a glance. However, it definitely went on too long. So for future chapters I will split them up into multiple parts if necessary. I stopped paraphrasing as much towards the end as I just wanted to get it over with.\n","date":"29 December 2023","permalink":"/posts/2023-12-pragmatic-programming-intro/","section":"Posts","summary":"Introduction # \u0026ldquo;An investment in knowledge always pays the best interest.","title":"Pragmatic Programming Principles: Introduction"}]